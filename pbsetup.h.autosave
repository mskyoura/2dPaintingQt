#ifndef PBSETUP_H
#define PBSETUP_H

#include "dbg.h"
#include "widget.h"
#include "vismo.h"
#include "window.h"
#include "processing.h"
#include "commandtypes.h"
#include "recievertypes.h"
#include "relaystatus.h"

#include <QWidget>
#include <QDialog>
#include <QtSerialPort/QSerialPort>
#include <QDebug>

namespace Ui {
class PBsetup;
}

class Widget;
class Window;
class Processing;



class PBsetup : public QDialog
{
    Q_OBJECT

public:
    explicit PBsetup(QWidget *parent = 0);
    ~PBsetup();

    Vismo vmPersonal;
    void paint(QPainter *painter, QPaintEvent *event);

    QString execCmd(QList<int> donorsNum, CmdTypes cmdType,
                    RecieverTypes rcvType, bool isTimeSlotActive);


private slots:
    void on_PBsetup_rejected();

    void on_PBsetup_accepted();

    void on_PBsetup_finished(int result);

    void focusOutEvent(QFocusEvent *);

    void on_BytesWritten();

private:
    Ui::PBsetup *ui;
    QWidget* wgt;
    void resizeEvent(QResizeEvent *event);
    void mousePressEvent(QMouseEvent *event);
    QWidget* parent;
    Window *pWin;//указатель на главное окно
    Processing* wProcess;

    bool isWriteDone;
    QSerialPort serialPort;

    static QString CRLF,
                   LFCR;

    int calcGroupCmdNum(QList <int> donorsNum);
    bool waitWithProgress(int ms, int& passed_ms, int total_ms, const QString& text);
    QString buildGroupCommand(int gCmdNumber0_255, CmdTypes cmdType, const QList<int>& donorsNum, QString& rbdlit,
                              int timeSlot, const QString& t1, const QString& t2);
    bool sendCommand(QSerialPort& serialPort, const QString& frameCmd);
    int sendGroupCommands(QSerialPort& serialPort, const QList<int>&  donorsNum, CmdTypes cmdType, int timeSlot,
                           int gTries, double gTBtwRepeats, int gTAfterCmd_ms);
    // Обработка получения ответов на команду нового формата от всех ПБ из группы с учётом задержек
    QList<QString> processDeviceSlots(QSerialPort& serialPort, CmdTypes cmdType, int gCmdNumber, const QList<int>& donorsNum);
    // Чтение и парсинг данных ответа на команду нового формата от заданного ПБ с учётом заданной задержки
    bool readResponseInSlot(QSerialPort& serialPort, RelayStatus relayStatus, Saver& donor, int timeoutPerSlotMs, bool& cont);
    //Ожидание3
    bool waitForSlot(int devSlot, int slotDelayMs, int slotAddDelayMs, bool& cont);

#ifdef Dbg
        int R1status;
        int R2status;
#endif


};

#endif // PBSETUP_H
